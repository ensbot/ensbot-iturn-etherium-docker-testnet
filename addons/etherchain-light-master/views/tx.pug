extends layout

block content
  h3 Transaction #{tx.hash}
  table.table
    tr

  div
    ul.nav.nav-tabs(role='tablist')
      li.active(role='presentation')
        a(href='#overview', aria-controls='overview', role='tab', data-toggle='tab') Overview
      li(role='presentation')
        a(href='#internal', aria-controls='internal', role='tab', data-toggle='tab') Internal Transactions
      li(role='presentation')
        a(href='#logs', aria-controls='logs', role='tab', data-toggle='tab') Event Logs
    .tab-content
      #overview.tab-pane.active(role='tabpanel')
        h3 Transaction Information
        table.table
          tr
            td Hash:
            td
              a(href="/tx/" + tx.hash) #{tx.hash}
          tr
            td Block hash:
            td
              a(href="/block/" + tx.blockHash) #{tx.blockHash}
          tr
            td Block number:
            td
              a(href="/block/" + tx.blockNumber) #{tx.blockNumber}
              |  |  #{tx.confirmations} confirmation(s)
          tr
            td Timestamp:
            td
                | #{moment.unix(tx.timestamp).fromNow()} | #{moment.unix(tx.timestamp).format()}
          tr
            td From:
            td
              a(href="/account/" + tx.from) #{nameformatter.format(tx.from)}
          tr
            td To:
            td
              if tx.to
                a(href="/account/" + tx.to) #{nameformatter.format(tx.to)}
              else
                | New Contract
                | [
                a(href="/account/" + tx.contractAddress) #{nameformatter.format(tx.contractAddress)}
                |  ]
          tr
            td Amount:
            td #{ethformatter(tx.value)}
          tr
            td Nonce:
            td #{tx.nonce}
          tr
            td Gas Limit:
            td #{tx.gas}
          tr
            td Gas Used:
            td #{tx.gasUsed}
          tr
            td Gas Price:
            td #{ethformatter(tx.gasPrice,"gwei")}
          tr
            td Fee:
            td #{ethformatter(tx.gasUsed * tx.gasPrice)}
          if tx.callInfo
            tr
              td Function Name:
              td #{tx.callInfo.name}
            tr
              td Parameters:
              td
                table.table
                  thead
                    tr
                      th Name
                      th Type
                      th Value
                  tbody
                    for pa in tx.callInfo.inputs
                      tr
                        td #{pa.name}
                        td #{pa.type}
                        if pa.type === "bytes"
                          td
                            pre 0x#{pa.result.toString("hex")}
                        else if pa.type === "uint256"
                          td.parameter-cell #{pa.result.toString(10)}
                        else
                          td.parameter-cell #{JSON.stringify(pa.result, null, 2)}
          tr
            td Data:
            td
              pre #{tx.input}

        //a(href="/tx/raw/" + tx.hash) Raw log

      #internal.tab-pane(role='tabpanel')
        h3 Internal Transactions
        table.table
          thead
            tr
              th
              th Type
              th From
              th To
              th Amount
          tbody
            for log in tx.traces
              tr
                td.text-right
                  if trace.error
                    span(style="color: red", data-toggle="tooltip", data-placement="left", title=trace.error).glyphicon.glyphicon-warning-sign
                    |
                td.capitalize #{trace.type}
                if trace.type === "call"
                  td
                    a(href="/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                  td
                    a(href="/account/" + trace.action.to) #{nameformatter.format(trace.action.to)}
                  td #{ethformatter(trace.action.value)}
                else if trace.type === "create"
                  td
                    a(href="/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                  td
                    if trace.result
                      a(href="/account/" + trace.result.address) #{nameformatter.format(trace.result.address)}
                    else
                      div #{'-'}
                  td #{ethformatter(trace.action.value)}
                else if trace.type === "suicide"
                  td
                    a(href="/account/" + trace.action.address) #{nameformatter.format(trace.action.address)}
                  td
                    a(href="/account/" + trace.action.refundAddress) #{nameformatter.format(trace.action.refundAddress)}
                  td #{ethformatter(trace.action.balance)}

      #logs.tab-pane(role='tabpanel')
        h3 Transaction Receipt Event Logs
        table.table
          thead
            th.capitatize Index
            th
          tbody
            for log in tx.logs
              tr
                td
                  span [ #{log.logIndex} ]
                td
                  table.table
                    for o in Object.keys(log)
                      if( ["blockNumber","transactionHash","transactionIndex","blockHash","logIndex"].indexOf(o) < 0 )
                        tr
                          td.text-left
                            span.capitalize #{o}:
                          td
                            if(o === "address")
                              a(href="/account/" + log[o]) #{nameformatter.format(log[o])}
                            else if(o === "topics")
                              table.table
                                for t in log[o]
                                  tr
                                    td [#{ log[o].indexOf(t) }]
                                    td #{t}
                            else
                              span #{log[o]}
